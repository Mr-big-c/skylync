// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skylync.proto

#ifndef PROTOBUF_skylync_2eproto__INCLUDED
#define PROTOBUF_skylync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_skylync_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsContextImpl();
void InitDefaultsContext();
void InitDefaultsAttachParamsImpl();
void InitDefaultsAttachParams();
void InitDefaultsRequestDeviceParamsImpl();
void InitDefaultsRequestDeviceParams();
void InitDefaultsDeviceIdImpl();
void InitDefaultsDeviceId();
void InitDefaultsDeviceListImpl();
void InitDefaultsDeviceList();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
void InitDefaultsEndpointMessageImpl();
void InitDefaultsEndpointMessage();
void InitDefaultsBridgeMessageImpl();
void InitDefaultsBridgeMessage();
inline void InitDefaults() {
  InitDefaultsContext();
  InitDefaultsAttachParams();
  InitDefaultsRequestDeviceParams();
  InitDefaultsDeviceId();
  InitDefaultsDeviceList();
  InitDefaultsMessage();
  InitDefaultsEndpointMessage();
  InitDefaultsBridgeMessage();
}
}  // namespace protobuf_skylync_2eproto
namespace skylync {
class AttachParams;
class AttachParamsDefaultTypeInternal;
extern AttachParamsDefaultTypeInternal _AttachParams_default_instance_;
class BridgeMessage;
class BridgeMessageDefaultTypeInternal;
extern BridgeMessageDefaultTypeInternal _BridgeMessage_default_instance_;
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class DeviceId;
class DeviceIdDefaultTypeInternal;
extern DeviceIdDefaultTypeInternal _DeviceId_default_instance_;
class DeviceList;
class DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
class EndpointMessage;
class EndpointMessageDefaultTypeInternal;
extern EndpointMessageDefaultTypeInternal _EndpointMessage_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class RequestDeviceParams;
class RequestDeviceParamsDefaultTypeInternal;
extern RequestDeviceParamsDefaultTypeInternal _RequestDeviceParams_default_instance_;
}  // namespace skylync
namespace skylync {

enum Message_Command {
  Message_Command_UNKNOWN_COMMAND = 0,
  Message_Command_ACCEPT = 1,
  Message_Command_REJECT = 2,
  Message_Command_ATTACH = 3,
  Message_Command_RELEASE = 4,
  Message_Command_CONTEXT_UPDATE = 5,
  Message_Command_POKE = 6,
  Message_Command_LIST_DEVICE = 7,
  Message_Command_STATUS_DEVICE = 8,
  Message_Command_REQUEST_DEVICE = 9,
  Message_Command_REQUEST_HO = 10,
  Message_Command_MISSION_APPROVAL = 11,
  Message_Command_TEARDOWN_MISSION = 12,
  Message_Command_STATUS_UPDATE = 13,
  Message_Command_OPERATION_REQUEST = 14,
  Message_Command_OPERATION_TEARDOWN = 15,
  Message_Command_Message_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Message_Command_Message_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Message_Command_IsValid(int value);
const Message_Command Message_Command_Command_MIN = Message_Command_UNKNOWN_COMMAND;
const Message_Command Message_Command_Command_MAX = Message_Command_OPERATION_TEARDOWN;
const int Message_Command_Command_ARRAYSIZE = Message_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Command_descriptor();
inline const ::std::string& Message_Command_Name(Message_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Command_descriptor(), value);
}
inline bool Message_Command_Parse(
    const ::std::string& name, Message_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Command>(
    Message_Command_descriptor(), name, value);
}
enum Message_Cause {
  Message_Cause_UNKNOWN_CAUSE = 0,
  Message_Cause_BAD_DATA = 1,
  Message_Cause_INTERNAL_ERROR = 2,
  Message_Cause_NOT_FOUND = 3,
  Message_Cause_UNAUTHORIZED = 4,
  Message_Cause_BUSY = 5,
  Message_Cause_BAD_DEVICE = 6,
  Message_Cause_NOT_CAPABLE = 7,
  Message_Cause_NOTED = 8,
  Message_Cause_BLOCKED = 9,
  Message_Cause_ALLREADY_IN_USE = 10,
  Message_Cause_OVERLOADED = 11,
  Message_Cause_AUTHENTICATION_FAILED = 12,
  Message_Cause_Message_Cause_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Message_Cause_Message_Cause_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Message_Cause_IsValid(int value);
const Message_Cause Message_Cause_Cause_MIN = Message_Cause_UNKNOWN_CAUSE;
const Message_Cause Message_Cause_Cause_MAX = Message_Cause_AUTHENTICATION_FAILED;
const int Message_Cause_Cause_ARRAYSIZE = Message_Cause_Cause_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Cause_descriptor();
inline const ::std::string& Message_Cause_Name(Message_Cause value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Cause_descriptor(), value);
}
inline bool Message_Cause_Parse(
    const ::std::string& name, Message_Cause* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Cause>(
    Message_Cause_descriptor(), name, value);
}
// ===================================================================

class Context : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(Context&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Context* other);
  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const PROTOBUF_FINAL { return New(NULL); }

  Context* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Context* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 refId = 1;
  void clear_refid();
  static const int kRefIdFieldNumber = 1;
  ::google::protobuf::uint64 refid() const;
  void set_refid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:skylync.Context)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 refid_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsContextImpl();
};
// -------------------------------------------------------------------

class AttachParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.AttachParams) */ {
 public:
  AttachParams();
  virtual ~AttachParams();

  AttachParams(const AttachParams& from);

  inline AttachParams& operator=(const AttachParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachParams(AttachParams&& from) noexcept
    : AttachParams() {
    *this = ::std::move(from);
  }

  inline AttachParams& operator=(AttachParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachParams* internal_default_instance() {
    return reinterpret_cast<const AttachParams*>(
               &_AttachParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AttachParams* other);
  friend void swap(AttachParams& a, AttachParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachParams* New() const PROTOBUF_FINAL { return New(NULL); }

  AttachParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttachParams& from);
  void MergeFrom(const AttachParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttachParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string pwd = 2;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:skylync.AttachParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsAttachParamsImpl();
};
// -------------------------------------------------------------------

class RequestDeviceParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.RequestDeviceParams) */ {
 public:
  RequestDeviceParams();
  virtual ~RequestDeviceParams();

  RequestDeviceParams(const RequestDeviceParams& from);

  inline RequestDeviceParams& operator=(const RequestDeviceParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestDeviceParams(RequestDeviceParams&& from) noexcept
    : RequestDeviceParams() {
    *this = ::std::move(from);
  }

  inline RequestDeviceParams& operator=(RequestDeviceParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestDeviceParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestDeviceParams* internal_default_instance() {
    return reinterpret_cast<const RequestDeviceParams*>(
               &_RequestDeviceParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RequestDeviceParams* other);
  friend void swap(RequestDeviceParams& a, RequestDeviceParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestDeviceParams* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestDeviceParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestDeviceParams& from);
  void MergeFrom(const RequestDeviceParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestDeviceParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 refId = 1;
  void clear_refid();
  static const int kRefIdFieldNumber = 1;
  ::google::protobuf::uint64 refid() const;
  void set_refid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:skylync.RequestDeviceParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 refid_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsRequestDeviceParamsImpl();
};
// -------------------------------------------------------------------

class DeviceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.DeviceId) */ {
 public:
  DeviceId();
  virtual ~DeviceId();

  DeviceId(const DeviceId& from);

  inline DeviceId& operator=(const DeviceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceId(DeviceId&& from) noexcept
    : DeviceId() {
    *this = ::std::move(from);
  }

  inline DeviceId& operator=(DeviceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceId* internal_default_instance() {
    return reinterpret_cast<const DeviceId*>(
               &_DeviceId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DeviceId* other);
  friend void swap(DeviceId& a, DeviceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceId* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceId& from);
  void MergeFrom(const DeviceId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  ::google::protobuf::uint64 ref() const;
  void set_ref(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:skylync.DeviceId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsDeviceIdImpl();
};
// -------------------------------------------------------------------

class DeviceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.DeviceList) */ {
 public:
  DeviceList();
  virtual ~DeviceList();

  DeviceList(const DeviceList& from);

  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceList(DeviceList&& from) noexcept
    : DeviceList() {
    *this = ::std::move(from);
  }

  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
               &_DeviceList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DeviceList* other);
  friend void swap(DeviceList& a, DeviceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceList* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceList& from);
  void MergeFrom(const DeviceList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .skylync.DeviceId devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  const ::skylync::DeviceId& devices(int index) const;
  ::skylync::DeviceId* mutable_devices(int index);
  ::skylync::DeviceId* add_devices();
  ::google::protobuf::RepeatedPtrField< ::skylync::DeviceId >*
      mutable_devices();
  const ::google::protobuf::RepeatedPtrField< ::skylync::DeviceId >&
      devices() const;

  // @@protoc_insertion_point(class_scope:skylync.DeviceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::skylync::DeviceId > devices_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsDeviceListImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Message_Command Command;
  static const Command UNKNOWN_COMMAND =
    Message_Command_UNKNOWN_COMMAND;
  static const Command ACCEPT =
    Message_Command_ACCEPT;
  static const Command REJECT =
    Message_Command_REJECT;
  static const Command ATTACH =
    Message_Command_ATTACH;
  static const Command RELEASE =
    Message_Command_RELEASE;
  static const Command CONTEXT_UPDATE =
    Message_Command_CONTEXT_UPDATE;
  static const Command POKE =
    Message_Command_POKE;
  static const Command LIST_DEVICE =
    Message_Command_LIST_DEVICE;
  static const Command STATUS_DEVICE =
    Message_Command_STATUS_DEVICE;
  static const Command REQUEST_DEVICE =
    Message_Command_REQUEST_DEVICE;
  static const Command REQUEST_HO =
    Message_Command_REQUEST_HO;
  static const Command MISSION_APPROVAL =
    Message_Command_MISSION_APPROVAL;
  static const Command TEARDOWN_MISSION =
    Message_Command_TEARDOWN_MISSION;
  static const Command STATUS_UPDATE =
    Message_Command_STATUS_UPDATE;
  static const Command OPERATION_REQUEST =
    Message_Command_OPERATION_REQUEST;
  static const Command OPERATION_TEARDOWN =
    Message_Command_OPERATION_TEARDOWN;
  static inline bool Command_IsValid(int value) {
    return Message_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Message_Command_Command_MIN;
  static const Command Command_MAX =
    Message_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Message_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Message_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Message_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Message_Command_Parse(name, value);
  }

  typedef Message_Cause Cause;
  static const Cause UNKNOWN_CAUSE =
    Message_Cause_UNKNOWN_CAUSE;
  static const Cause BAD_DATA =
    Message_Cause_BAD_DATA;
  static const Cause INTERNAL_ERROR =
    Message_Cause_INTERNAL_ERROR;
  static const Cause NOT_FOUND =
    Message_Cause_NOT_FOUND;
  static const Cause UNAUTHORIZED =
    Message_Cause_UNAUTHORIZED;
  static const Cause BUSY =
    Message_Cause_BUSY;
  static const Cause BAD_DEVICE =
    Message_Cause_BAD_DEVICE;
  static const Cause NOT_CAPABLE =
    Message_Cause_NOT_CAPABLE;
  static const Cause NOTED =
    Message_Cause_NOTED;
  static const Cause BLOCKED =
    Message_Cause_BLOCKED;
  static const Cause ALLREADY_IN_USE =
    Message_Cause_ALLREADY_IN_USE;
  static const Cause OVERLOADED =
    Message_Cause_OVERLOADED;
  static const Cause AUTHENTICATION_FAILED =
    Message_Cause_AUTHENTICATION_FAILED;
  static inline bool Cause_IsValid(int value) {
    return Message_Cause_IsValid(value);
  }
  static const Cause Cause_MIN =
    Message_Cause_Cause_MIN;
  static const Cause Cause_MAX =
    Message_Cause_Cause_MAX;
  static const int Cause_ARRAYSIZE =
    Message_Cause_Cause_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cause_descriptor() {
    return Message_Cause_descriptor();
  }
  static inline const ::std::string& Cause_Name(Cause value) {
    return Message_Cause_Name(value);
  }
  static inline bool Cause_Parse(const ::std::string& name,
      Cause* value) {
    return Message_Cause_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string note = 4;
  void clear_note();
  static const int kNoteFieldNumber = 4;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  #if LANG_CXX11
  void set_note(::std::string&& value);
  #endif
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // .skylync.Message.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::skylync::Message_Command command() const;
  void set_command(::skylync::Message_Command value);

  // .skylync.Message.Command responseFor = 2;
  void clear_responsefor();
  static const int kResponseForFieldNumber = 2;
  ::skylync::Message_Command responsefor() const;
  void set_responsefor(::skylync::Message_Command value);

  // .skylync.Message.Cause cause = 3;
  void clear_cause();
  static const int kCauseFieldNumber = 3;
  ::skylync::Message_Cause cause() const;
  void set_cause(::skylync::Message_Cause value);

  // @@protoc_insertion_point(class_scope:skylync.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  int command_;
  int responsefor_;
  int cause_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsMessageImpl();
};
// -------------------------------------------------------------------

class EndpointMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.EndpointMessage) */ {
 public:
  EndpointMessage();
  virtual ~EndpointMessage();

  EndpointMessage(const EndpointMessage& from);

  inline EndpointMessage& operator=(const EndpointMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndpointMessage(EndpointMessage&& from) noexcept
    : EndpointMessage() {
    *this = ::std::move(from);
  }

  inline EndpointMessage& operator=(EndpointMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndpointMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointMessage* internal_default_instance() {
    return reinterpret_cast<const EndpointMessage*>(
               &_EndpointMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EndpointMessage* other);
  friend void swap(EndpointMessage& a, EndpointMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndpointMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  EndpointMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndpointMessage& from);
  void MergeFrom(const EndpointMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndpointMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .skylync.Message base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::skylync::Message& base() const;
  ::skylync::Message* release_base();
  ::skylync::Message* mutable_base();
  void set_allocated_base(::skylync::Message* base);

  // .skylync.AttachParams attachParams = 2;
  bool has_attachparams() const;
  void clear_attachparams();
  static const int kAttachParamsFieldNumber = 2;
  const ::skylync::AttachParams& attachparams() const;
  ::skylync::AttachParams* release_attachparams();
  ::skylync::AttachParams* mutable_attachparams();
  void set_allocated_attachparams(::skylync::AttachParams* attachparams);

  // .skylync.Context context = 3;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 3;
  const ::skylync::Context& context() const;
  ::skylync::Context* release_context();
  ::skylync::Context* mutable_context();
  void set_allocated_context(::skylync::Context* context);

  // .skylync.RequestDeviceParams requestDeviceParams = 4;
  bool has_requestdeviceparams() const;
  void clear_requestdeviceparams();
  static const int kRequestDeviceParamsFieldNumber = 4;
  const ::skylync::RequestDeviceParams& requestdeviceparams() const;
  ::skylync::RequestDeviceParams* release_requestdeviceparams();
  ::skylync::RequestDeviceParams* mutable_requestdeviceparams();
  void set_allocated_requestdeviceparams(::skylync::RequestDeviceParams* requestdeviceparams);

  // @@protoc_insertion_point(class_scope:skylync.EndpointMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::skylync::Message* base_;
  ::skylync::AttachParams* attachparams_;
  ::skylync::Context* context_;
  ::skylync::RequestDeviceParams* requestdeviceparams_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsEndpointMessageImpl();
};
// -------------------------------------------------------------------

class BridgeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skylync.BridgeMessage) */ {
 public:
  BridgeMessage();
  virtual ~BridgeMessage();

  BridgeMessage(const BridgeMessage& from);

  inline BridgeMessage& operator=(const BridgeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeMessage(BridgeMessage&& from) noexcept
    : BridgeMessage() {
    *this = ::std::move(from);
  }

  inline BridgeMessage& operator=(BridgeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeMessage* internal_default_instance() {
    return reinterpret_cast<const BridgeMessage*>(
               &_BridgeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BridgeMessage* other);
  friend void swap(BridgeMessage& a, BridgeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  BridgeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BridgeMessage& from);
  void MergeFrom(const BridgeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BridgeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .skylync.Message base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::skylync::Message& base() const;
  ::skylync::Message* release_base();
  ::skylync::Message* mutable_base();
  void set_allocated_base(::skylync::Message* base);

  // .skylync.Context context = 2;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 2;
  const ::skylync::Context& context() const;
  ::skylync::Context* release_context();
  ::skylync::Context* mutable_context();
  void set_allocated_context(::skylync::Context* context);

  // .skylync.DeviceList deviceList = 3;
  bool has_devicelist() const;
  void clear_devicelist();
  static const int kDeviceListFieldNumber = 3;
  const ::skylync::DeviceList& devicelist() const;
  ::skylync::DeviceList* release_devicelist();
  ::skylync::DeviceList* mutable_devicelist();
  void set_allocated_devicelist(::skylync::DeviceList* devicelist);

  // @@protoc_insertion_point(class_scope:skylync.BridgeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::skylync::Message* base_;
  ::skylync::Context* context_;
  ::skylync::DeviceList* devicelist_;
  mutable int _cached_size_;
  friend struct ::protobuf_skylync_2eproto::TableStruct;
  friend void ::protobuf_skylync_2eproto::InitDefaultsBridgeMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Context

// uint64 refId = 1;
inline void Context::clear_refid() {
  refid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Context::refid() const {
  // @@protoc_insertion_point(field_get:skylync.Context.refId)
  return refid_;
}
inline void Context::set_refid(::google::protobuf::uint64 value) {
  
  refid_ = value;
  // @@protoc_insertion_point(field_set:skylync.Context.refId)
}

// -------------------------------------------------------------------

// AttachParams

// string id = 1;
inline void AttachParams::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachParams::id() const {
  // @@protoc_insertion_point(field_get:skylync.AttachParams.id)
  return id_.GetNoArena();
}
inline void AttachParams::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skylync.AttachParams.id)
}
#if LANG_CXX11
inline void AttachParams::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skylync.AttachParams.id)
}
#endif
inline void AttachParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skylync.AttachParams.id)
}
inline void AttachParams::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skylync.AttachParams.id)
}
inline ::std::string* AttachParams::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:skylync.AttachParams.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachParams::release_id() {
  // @@protoc_insertion_point(field_release:skylync.AttachParams.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachParams::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:skylync.AttachParams.id)
}

// string pwd = 2;
inline void AttachParams::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachParams::pwd() const {
  // @@protoc_insertion_point(field_get:skylync.AttachParams.pwd)
  return pwd_.GetNoArena();
}
inline void AttachParams::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skylync.AttachParams.pwd)
}
#if LANG_CXX11
inline void AttachParams::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skylync.AttachParams.pwd)
}
#endif
inline void AttachParams::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skylync.AttachParams.pwd)
}
inline void AttachParams::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skylync.AttachParams.pwd)
}
inline ::std::string* AttachParams::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:skylync.AttachParams.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachParams::release_pwd() {
  // @@protoc_insertion_point(field_release:skylync.AttachParams.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachParams::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:skylync.AttachParams.pwd)
}

// -------------------------------------------------------------------

// RequestDeviceParams

// uint64 refId = 1;
inline void RequestDeviceParams::clear_refid() {
  refid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestDeviceParams::refid() const {
  // @@protoc_insertion_point(field_get:skylync.RequestDeviceParams.refId)
  return refid_;
}
inline void RequestDeviceParams::set_refid(::google::protobuf::uint64 value) {
  
  refid_ = value;
  // @@protoc_insertion_point(field_set:skylync.RequestDeviceParams.refId)
}

// -------------------------------------------------------------------

// DeviceId

// uint64 ref = 1;
inline void DeviceId::clear_ref() {
  ref_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceId::ref() const {
  // @@protoc_insertion_point(field_get:skylync.DeviceId.ref)
  return ref_;
}
inline void DeviceId::set_ref(::google::protobuf::uint64 value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:skylync.DeviceId.ref)
}

// string name = 2;
inline void DeviceId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceId::name() const {
  // @@protoc_insertion_point(field_get:skylync.DeviceId.name)
  return name_.GetNoArena();
}
inline void DeviceId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skylync.DeviceId.name)
}
#if LANG_CXX11
inline void DeviceId::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skylync.DeviceId.name)
}
#endif
inline void DeviceId::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skylync.DeviceId.name)
}
inline void DeviceId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skylync.DeviceId.name)
}
inline ::std::string* DeviceId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:skylync.DeviceId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceId::release_name() {
  // @@protoc_insertion_point(field_release:skylync.DeviceId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceId::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:skylync.DeviceId.name)
}

// -------------------------------------------------------------------

// DeviceList

// repeated .skylync.DeviceId devices = 1;
inline int DeviceList::devices_size() const {
  return devices_.size();
}
inline void DeviceList::clear_devices() {
  devices_.Clear();
}
inline const ::skylync::DeviceId& DeviceList::devices(int index) const {
  // @@protoc_insertion_point(field_get:skylync.DeviceList.devices)
  return devices_.Get(index);
}
inline ::skylync::DeviceId* DeviceList::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:skylync.DeviceList.devices)
  return devices_.Mutable(index);
}
inline ::skylync::DeviceId* DeviceList::add_devices() {
  // @@protoc_insertion_point(field_add:skylync.DeviceList.devices)
  return devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::skylync::DeviceId >*
DeviceList::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:skylync.DeviceList.devices)
  return &devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::skylync::DeviceId >&
DeviceList::devices() const {
  // @@protoc_insertion_point(field_list:skylync.DeviceList.devices)
  return devices_;
}

// -------------------------------------------------------------------

// Message

// .skylync.Message.Command command = 1;
inline void Message::clear_command() {
  command_ = 0;
}
inline ::skylync::Message_Command Message::command() const {
  // @@protoc_insertion_point(field_get:skylync.Message.command)
  return static_cast< ::skylync::Message_Command >(command_);
}
inline void Message::set_command(::skylync::Message_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:skylync.Message.command)
}

// .skylync.Message.Command responseFor = 2;
inline void Message::clear_responsefor() {
  responsefor_ = 0;
}
inline ::skylync::Message_Command Message::responsefor() const {
  // @@protoc_insertion_point(field_get:skylync.Message.responseFor)
  return static_cast< ::skylync::Message_Command >(responsefor_);
}
inline void Message::set_responsefor(::skylync::Message_Command value) {
  
  responsefor_ = value;
  // @@protoc_insertion_point(field_set:skylync.Message.responseFor)
}

// .skylync.Message.Cause cause = 3;
inline void Message::clear_cause() {
  cause_ = 0;
}
inline ::skylync::Message_Cause Message::cause() const {
  // @@protoc_insertion_point(field_get:skylync.Message.cause)
  return static_cast< ::skylync::Message_Cause >(cause_);
}
inline void Message::set_cause(::skylync::Message_Cause value) {
  
  cause_ = value;
  // @@protoc_insertion_point(field_set:skylync.Message.cause)
}

// string note = 4;
inline void Message::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::note() const {
  // @@protoc_insertion_point(field_get:skylync.Message.note)
  return note_.GetNoArena();
}
inline void Message::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skylync.Message.note)
}
#if LANG_CXX11
inline void Message::set_note(::std::string&& value) {
  
  note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skylync.Message.note)
}
#endif
inline void Message::set_note(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skylync.Message.note)
}
inline void Message::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skylync.Message.note)
}
inline ::std::string* Message::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:skylync.Message.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_note() {
  // @@protoc_insertion_point(field_release:skylync.Message.note)
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:skylync.Message.note)
}

// -------------------------------------------------------------------

// EndpointMessage

// .skylync.Message base = 1;
inline bool EndpointMessage::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void EndpointMessage::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::skylync::Message& EndpointMessage::base() const {
  const ::skylync::Message* p = base_;
  // @@protoc_insertion_point(field_get:skylync.EndpointMessage.base)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::Message*>(
      &::skylync::_Message_default_instance_);
}
inline ::skylync::Message* EndpointMessage::release_base() {
  // @@protoc_insertion_point(field_release:skylync.EndpointMessage.base)
  
  ::skylync::Message* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::skylync::Message* EndpointMessage::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::skylync::Message;
  }
  // @@protoc_insertion_point(field_mutable:skylync.EndpointMessage.base)
  return base_;
}
inline void EndpointMessage::set_allocated_base(::skylync::Message* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:skylync.EndpointMessage.base)
}

// .skylync.AttachParams attachParams = 2;
inline bool EndpointMessage::has_attachparams() const {
  return this != internal_default_instance() && attachparams_ != NULL;
}
inline void EndpointMessage::clear_attachparams() {
  if (GetArenaNoVirtual() == NULL && attachparams_ != NULL) {
    delete attachparams_;
  }
  attachparams_ = NULL;
}
inline const ::skylync::AttachParams& EndpointMessage::attachparams() const {
  const ::skylync::AttachParams* p = attachparams_;
  // @@protoc_insertion_point(field_get:skylync.EndpointMessage.attachParams)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::AttachParams*>(
      &::skylync::_AttachParams_default_instance_);
}
inline ::skylync::AttachParams* EndpointMessage::release_attachparams() {
  // @@protoc_insertion_point(field_release:skylync.EndpointMessage.attachParams)
  
  ::skylync::AttachParams* temp = attachparams_;
  attachparams_ = NULL;
  return temp;
}
inline ::skylync::AttachParams* EndpointMessage::mutable_attachparams() {
  
  if (attachparams_ == NULL) {
    attachparams_ = new ::skylync::AttachParams;
  }
  // @@protoc_insertion_point(field_mutable:skylync.EndpointMessage.attachParams)
  return attachparams_;
}
inline void EndpointMessage::set_allocated_attachparams(::skylync::AttachParams* attachparams) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attachparams_;
  }
  if (attachparams) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attachparams = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attachparams, submessage_arena);
    }
    
  } else {
    
  }
  attachparams_ = attachparams;
  // @@protoc_insertion_point(field_set_allocated:skylync.EndpointMessage.attachParams)
}

// .skylync.Context context = 3;
inline bool EndpointMessage::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline void EndpointMessage::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
}
inline const ::skylync::Context& EndpointMessage::context() const {
  const ::skylync::Context* p = context_;
  // @@protoc_insertion_point(field_get:skylync.EndpointMessage.context)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::Context*>(
      &::skylync::_Context_default_instance_);
}
inline ::skylync::Context* EndpointMessage::release_context() {
  // @@protoc_insertion_point(field_release:skylync.EndpointMessage.context)
  
  ::skylync::Context* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::skylync::Context* EndpointMessage::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::skylync::Context;
  }
  // @@protoc_insertion_point(field_mutable:skylync.EndpointMessage.context)
  return context_;
}
inline void EndpointMessage::set_allocated_context(::skylync::Context* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete context_;
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:skylync.EndpointMessage.context)
}

// .skylync.RequestDeviceParams requestDeviceParams = 4;
inline bool EndpointMessage::has_requestdeviceparams() const {
  return this != internal_default_instance() && requestdeviceparams_ != NULL;
}
inline void EndpointMessage::clear_requestdeviceparams() {
  if (GetArenaNoVirtual() == NULL && requestdeviceparams_ != NULL) {
    delete requestdeviceparams_;
  }
  requestdeviceparams_ = NULL;
}
inline const ::skylync::RequestDeviceParams& EndpointMessage::requestdeviceparams() const {
  const ::skylync::RequestDeviceParams* p = requestdeviceparams_;
  // @@protoc_insertion_point(field_get:skylync.EndpointMessage.requestDeviceParams)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::RequestDeviceParams*>(
      &::skylync::_RequestDeviceParams_default_instance_);
}
inline ::skylync::RequestDeviceParams* EndpointMessage::release_requestdeviceparams() {
  // @@protoc_insertion_point(field_release:skylync.EndpointMessage.requestDeviceParams)
  
  ::skylync::RequestDeviceParams* temp = requestdeviceparams_;
  requestdeviceparams_ = NULL;
  return temp;
}
inline ::skylync::RequestDeviceParams* EndpointMessage::mutable_requestdeviceparams() {
  
  if (requestdeviceparams_ == NULL) {
    requestdeviceparams_ = new ::skylync::RequestDeviceParams;
  }
  // @@protoc_insertion_point(field_mutable:skylync.EndpointMessage.requestDeviceParams)
  return requestdeviceparams_;
}
inline void EndpointMessage::set_allocated_requestdeviceparams(::skylync::RequestDeviceParams* requestdeviceparams) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete requestdeviceparams_;
  }
  if (requestdeviceparams) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requestdeviceparams = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requestdeviceparams, submessage_arena);
    }
    
  } else {
    
  }
  requestdeviceparams_ = requestdeviceparams;
  // @@protoc_insertion_point(field_set_allocated:skylync.EndpointMessage.requestDeviceParams)
}

// -------------------------------------------------------------------

// BridgeMessage

// .skylync.Message base = 1;
inline bool BridgeMessage::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void BridgeMessage::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::skylync::Message& BridgeMessage::base() const {
  const ::skylync::Message* p = base_;
  // @@protoc_insertion_point(field_get:skylync.BridgeMessage.base)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::Message*>(
      &::skylync::_Message_default_instance_);
}
inline ::skylync::Message* BridgeMessage::release_base() {
  // @@protoc_insertion_point(field_release:skylync.BridgeMessage.base)
  
  ::skylync::Message* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::skylync::Message* BridgeMessage::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::skylync::Message;
  }
  // @@protoc_insertion_point(field_mutable:skylync.BridgeMessage.base)
  return base_;
}
inline void BridgeMessage::set_allocated_base(::skylync::Message* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:skylync.BridgeMessage.base)
}

// .skylync.Context context = 2;
inline bool BridgeMessage::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline void BridgeMessage::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
}
inline const ::skylync::Context& BridgeMessage::context() const {
  const ::skylync::Context* p = context_;
  // @@protoc_insertion_point(field_get:skylync.BridgeMessage.context)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::Context*>(
      &::skylync::_Context_default_instance_);
}
inline ::skylync::Context* BridgeMessage::release_context() {
  // @@protoc_insertion_point(field_release:skylync.BridgeMessage.context)
  
  ::skylync::Context* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::skylync::Context* BridgeMessage::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::skylync::Context;
  }
  // @@protoc_insertion_point(field_mutable:skylync.BridgeMessage.context)
  return context_;
}
inline void BridgeMessage::set_allocated_context(::skylync::Context* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete context_;
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:skylync.BridgeMessage.context)
}

// .skylync.DeviceList deviceList = 3;
inline bool BridgeMessage::has_devicelist() const {
  return this != internal_default_instance() && devicelist_ != NULL;
}
inline void BridgeMessage::clear_devicelist() {
  if (GetArenaNoVirtual() == NULL && devicelist_ != NULL) {
    delete devicelist_;
  }
  devicelist_ = NULL;
}
inline const ::skylync::DeviceList& BridgeMessage::devicelist() const {
  const ::skylync::DeviceList* p = devicelist_;
  // @@protoc_insertion_point(field_get:skylync.BridgeMessage.deviceList)
  return p != NULL ? *p : *reinterpret_cast<const ::skylync::DeviceList*>(
      &::skylync::_DeviceList_default_instance_);
}
inline ::skylync::DeviceList* BridgeMessage::release_devicelist() {
  // @@protoc_insertion_point(field_release:skylync.BridgeMessage.deviceList)
  
  ::skylync::DeviceList* temp = devicelist_;
  devicelist_ = NULL;
  return temp;
}
inline ::skylync::DeviceList* BridgeMessage::mutable_devicelist() {
  
  if (devicelist_ == NULL) {
    devicelist_ = new ::skylync::DeviceList;
  }
  // @@protoc_insertion_point(field_mutable:skylync.BridgeMessage.deviceList)
  return devicelist_;
}
inline void BridgeMessage::set_allocated_devicelist(::skylync::DeviceList* devicelist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete devicelist_;
  }
  if (devicelist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      devicelist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, devicelist, submessage_arena);
    }
    
  } else {
    
  }
  devicelist_ = devicelist;
  // @@protoc_insertion_point(field_set_allocated:skylync.BridgeMessage.deviceList)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skylync

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::skylync::Message_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skylync::Message_Command>() {
  return ::skylync::Message_Command_descriptor();
}
template <> struct is_proto_enum< ::skylync::Message_Cause> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skylync::Message_Cause>() {
  return ::skylync::Message_Cause_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_skylync_2eproto__INCLUDED
